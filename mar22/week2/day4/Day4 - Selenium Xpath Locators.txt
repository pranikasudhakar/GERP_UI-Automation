
Selenium - Locator using Xpath
==================================

When an element was not able to identify uniquely using below locators then we go for 6) Xpath

1. id - attribute; unique; should not have any numeric value or numbers - Covered
2. name - attribute; unique; when i cannot for id then go with name
3. linkText (<a> is a hyperlink with text) 
4. class - attribute; This should not have spaces i.e., if there is space ignore this locator and move to TagName
5. TagName

Syntax for Xpath: //tagName[@attribute='attributeValue']

Two type of Xpath:
===================
	1) Absolute Xpath
	==================
	/html/body/div[2]/table/tbody/tr/td[2]/table/tbody/tr[4]/td/table/tbody/tr/td[2]/table/tbody/tr[5]/td/form/table/tbody/tr[2]/td[2]/b/font/input[1]
	
	2) Relative Xpath
	==================
	a) Attribute Based Xpath:
	============================
	Syntax: //tagName[@attribute='attributeValue']
	Example: //tagName[@id='username']
	
	b) Text Based Xpath:
	=====================
	Syntax: //tagName[text()='textValue']
	//a[text()='SIGN-OFF']

	c) Partial Attribute Xpath:
	===========================
	Syntax: //tagName[contains(@attribute,'partial Text Attribute Value')]
	
	d) Partial Text Xpath:
	======================
	Syntax: //tagName[contains(text(),'partial Text Value')]
	//a[contains(text(),'SAP HR')]
	
	
	e) Starts With:
	================
	Id=” message12″
	Id=” message345″
	Id=” message8769″
	Xpath=//tagName[starts-with(@id,'message')]
	
	
	Collections Based Xpath (or) Index Based Xpath
	===============================================
	Xpath based on the indexes with or without relations
	Note: Index starts with 1
	
	a) Using the Item index: 
	Syntgeax:(xpath)[index]
	
	b) Using Child Item index:
	Syntax: (parent-xpath)/child-tagname[index]

	c) Using AND Condition:
	Syntax: //tagName[@attribute1='value1' and @attribute2='value2']
	
	d) Using OR Condition:
	Syntax: //tagName[@attribute1='value1' or @attribute2='value2']
	
	Axes Based Xpath (or) Relation Based Xpath
	==========================================
	Xpath based on the sibling and cousing relationship
	
	a) Younger Sibling:
	Syntax: (xpath)/following-sibling::sibling-tagName
	(//input[@name='password'])/following-sibling::label
	
	a) Elder Sibling:
	Syntax: (xpath)/preceeding-sibling::sibling-tagName
	(//label[@id='message18'])/preceding-sibling::input
	
	c) Younger Cousin:
	Syntax: (xpath)/following::cousin-tagname
	(//a[text()='Software Testing'])/following::a[2]
	
	d)Elder Cousin:
	Syntax: (xpath)/preceding::cousing-tagname
	(//a[text()='Cucumber Testing'])/preceding::a[2]
	
	Parent-Child XPath:
	====================
	a) Parent to Child:
	Xpath based on the [grand] parent to [grand] child relationship
	
	Syntax: (xpath of Parent)/child-tagName
	((//div[@class='canvas-graph'])[7])/div
	
	
	b) Child to Parent
	Syntax: (xpath of Child)/parent::parent-tagName
	((//b[@class='caret'])[2])/parent::a
	
	c) Child to Ancestor
	Syntax: (xpath of Child)/ancestor::ancestor-tagName
	
	d) Ancestor to Child
	Syntax: (xpath of ancestor)/child-tagName
	
	e) Last Child:
		Syntax: (xpath of parent)/child-tagName[last()]

ImplicitylyWait:
===============	
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);


CSS Selector:
=============

CSS Selector is a pattern used to select the element(s) you want to stype (WebDevelopment) or to find the elements in HTML web page (web Automation-Selenium)

5 Types of CSS Selector and 4 used in Selenium and 5 is used in Web Development

CSS Simple Selectors
	Used for finding the elements based on simple attributes (id and class)
CSS Pseudo-class selectors
	Used for finding the elements based on element location/position/indexes
CSS Combinator selectors
	Used for defining the relationship between elements in the html webpage
CSS Attribute selectors
	Used for finding the elements based on attribute and attribute values

Tag and ID (OR) Tag#id (OR) #id Note: TagName is optional, 
Tag and Class (OR) Tag.class (OR) .class Note: TagName is optional, 
Tag and Attribute (OR) [attribute=value] Note: TagName is optional, 
Tag, class and attribute Tag.class[attribue=value]

driver.findElement(By.cssSelector("#email")).sendKeys("abc@gmail.com");
driver.findElement(By.cssSelector(".className")).sendKeys("abc@gmail.com");
driver.findElement(By.cssSelector("[attribute=value]"].sendKeys("abc@gmail.com");
driver.findElement(By.cssSelector("Tag.className[attribute=value]"].sendKeys("abc@gmail.com");

//current html tag[@attribute='value']/following-sibling::siblingTag[@attribute='value']
//current html tag[@attribute='value']/preceding-sibling::siblingTag[@attribute='value']
//*[@attribute='value']/ancestor::tagName
//*[@attribute='value']/descendant::tagName


CSS VS Xpath
==============
performance
User Friendliness
ElementIdentification

			1Ancestor
			
precending2	3parent		4following
	
	5	6	self	7	8
	
9	10		11child		12	13
	
	14	15	16descendent			17	18